// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datahem/protobuf/measurementprotocol/v2/measurement_protocol.proto

package org.datahem.protobuf.measurementprotocol.v2;

/*-
 * ========================LICENSE_START=================================
 * Datahem.processor.measurementprotocol
 * %%
 * Copyright (C) 2018 - 2019 Robert Sahlin
 * %%
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
 * =========================LICENSE_END==================================
 */

/**
 * Protobuf type {@code datahem.protobuf.measurementprotocol.v2.Geo}
 */
public final class Geo extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:datahem.protobuf.measurementprotocol.v2.Geo)
        GeoOrBuilder {
    // Use Geo.newBuilder() to construct.
    private Geo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private Geo() {
        country_ = "";
        region_ = "";
        city_ = "";
        cityLatLong_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private Geo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!input.skipField(tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        java.lang.String s = input.readStringRequireUtf8();

                        country_ = s;
                        break;
                    }
                    case 18: {
                        java.lang.String s = input.readStringRequireUtf8();

                        region_ = s;
                        break;
                    }
                    case 26: {
                        java.lang.String s = input.readStringRequireUtf8();

                        city_ = s;
                        break;
                    }
                    case 34: {
                        java.lang.String s = input.readStringRequireUtf8();

                        cityLatLong_ = s;
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return org.datahem.protobuf.measurementprotocol.v2.MeasurementProtocolOuterClass.internal_static_datahem_protobuf_measurementprotocol_v2_Geo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return org.datahem.protobuf.measurementprotocol.v2.MeasurementProtocolOuterClass.internal_static_datahem_protobuf_measurementprotocol_v2_Geo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        org.datahem.protobuf.measurementprotocol.v2.Geo.class, org.datahem.protobuf.measurementprotocol.v2.Geo.Builder.class);
    }

    public static final int COUNTRY_FIELD_NUMBER = 1;
    private volatile java.lang.Object country_;

    /**
     * <pre>
     * X-AppEngine-Country. The country from which sessions originated, based on IP address.
     * </pre>
     *
     * <code>optional string country = 1;</code>
     */
    public java.lang.String getCountry() {
        java.lang.Object ref = country_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            country_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * X-AppEngine-Country. The country from which sessions originated, based on IP address.
     * </pre>
     *
     * <code>optional string country = 1;</code>
     */
    public com.google.protobuf.ByteString
    getCountryBytes() {
        java.lang.Object ref = country_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            country_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int REGION_FIELD_NUMBER = 2;
    private volatile java.lang.Object region_;

    /**
     * <pre>
     * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
     * </pre>
     *
     * <code>optional string region = 2;</code>
     */
    public java.lang.String getRegion() {
        java.lang.Object ref = region_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            region_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
     * </pre>
     *
     * <code>optional string region = 2;</code>
     */
    public com.google.protobuf.ByteString
    getRegionBytes() {
        java.lang.Object ref = region_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            region_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int CITY_FIELD_NUMBER = 3;
    private volatile java.lang.Object city_;

    /**
     * <pre>
     * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
     * </pre>
     *
     * <code>optional string city = 3;</code>
     */
    public java.lang.String getCity() {
        java.lang.Object ref = city_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            city_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
     * </pre>
     *
     * <code>optional string city = 3;</code>
     */
    public com.google.protobuf.ByteString
    getCityBytes() {
        java.lang.Object ref = city_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            city_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    public static final int CITYLATLONG_FIELD_NUMBER = 4;
    private volatile java.lang.Object cityLatLong_;

    /**
     * <pre>
     * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
     * </pre>
     *
     * <code>optional string cityLatLong = 4;</code>
     */
    public java.lang.String getCityLatLong() {
        java.lang.Object ref = cityLatLong_;
        if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
        } else {
            com.google.protobuf.ByteString bs =
                    (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            cityLatLong_ = s;
            return s;
        }
    }

    /**
     * <pre>
     * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
     * </pre>
     *
     * <code>optional string cityLatLong = 4;</code>
     */
    public com.google.protobuf.ByteString
    getCityLatLongBytes() {
        java.lang.Object ref = cityLatLong_;
        if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b =
                    com.google.protobuf.ByteString.copyFromUtf8(
                            (java.lang.String) ref);
            cityLatLong_ = b;
            return b;
        } else {
            return (com.google.protobuf.ByteString) ref;
        }
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (!getCountryBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, country_);
        }
        if (!getRegionBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, region_);
        }
        if (!getCityBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 3, city_);
        }
        if (!getCityLatLongBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 4, cityLatLong_);
        }
    }

    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getCountryBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, country_);
        }
        if (!getRegionBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, region_);
        }
        if (!getCityBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, city_);
        }
        if (!getCityLatLongBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, cityLatLong_);
        }
        memoizedSize = size;
        return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.datahem.protobuf.measurementprotocol.v2.Geo)) {
            return super.equals(obj);
        }
        org.datahem.protobuf.measurementprotocol.v2.Geo other = (org.datahem.protobuf.measurementprotocol.v2.Geo) obj;

        boolean result = true;
        result = result && getCountry()
                .equals(other.getCountry());
        result = result && getRegion()
                .equals(other.getRegion());
        result = result && getCity()
                .equals(other.getCity());
        result = result && getCityLatLong()
                .equals(other.getCityLatLong());
        return result;
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        hash = (37 * hash) + COUNTRY_FIELD_NUMBER;
        hash = (53 * hash) + getCountry().hashCode();
        hash = (37 * hash) + REGION_FIELD_NUMBER;
        hash = (53 * hash) + getRegion().hashCode();
        hash = (37 * hash) + CITY_FIELD_NUMBER;
        hash = (53 * hash) + getCity().hashCode();
        hash = (37 * hash) + CITYLATLONG_FIELD_NUMBER;
        hash = (53 * hash) + getCityLatLong().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(org.datahem.protobuf.measurementprotocol.v2.Geo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code datahem.protobuf.measurementprotocol.v2.Geo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:datahem.protobuf.measurementprotocol.v2.Geo)
            org.datahem.protobuf.measurementprotocol.v2.GeoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.datahem.protobuf.measurementprotocol.v2.MeasurementProtocolOuterClass.internal_static_datahem_protobuf_measurementprotocol_v2_Geo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.datahem.protobuf.measurementprotocol.v2.MeasurementProtocolOuterClass.internal_static_datahem_protobuf_measurementprotocol_v2_Geo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.datahem.protobuf.measurementprotocol.v2.Geo.class, org.datahem.protobuf.measurementprotocol.v2.Geo.Builder.class);
        }

        // Construct using org.datahem.protobuf.measurementprotocol.v2.Geo.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
        }

        public Builder clear() {
            super.clear();
            country_ = "";

            region_ = "";

            city_ = "";

            cityLatLong_ = "";

            return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return org.datahem.protobuf.measurementprotocol.v2.MeasurementProtocolOuterClass.internal_static_datahem_protobuf_measurementprotocol_v2_Geo_descriptor;
        }

        public org.datahem.protobuf.measurementprotocol.v2.Geo getDefaultInstanceForType() {
            return org.datahem.protobuf.measurementprotocol.v2.Geo.getDefaultInstance();
        }

        public org.datahem.protobuf.measurementprotocol.v2.Geo build() {
            org.datahem.protobuf.measurementprotocol.v2.Geo result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        public org.datahem.protobuf.measurementprotocol.v2.Geo buildPartial() {
            org.datahem.protobuf.measurementprotocol.v2.Geo result = new org.datahem.protobuf.measurementprotocol.v2.Geo(this);
            result.country_ = country_;
            result.region_ = region_;
            result.city_ = city_;
            result.cityLatLong_ = cityLatLong_;
            onBuilt();
            return result;
        }

        public Builder clone() {
            return (Builder) super.clone();
        }

        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.setField(field, value);
        }

        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
        }

        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
        }

        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
        }

        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return (Builder) super.addRepeatedField(field, value);
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof org.datahem.protobuf.measurementprotocol.v2.Geo) {
                return mergeFrom((org.datahem.protobuf.measurementprotocol.v2.Geo) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(org.datahem.protobuf.measurementprotocol.v2.Geo other) {
            if (other == org.datahem.protobuf.measurementprotocol.v2.Geo.getDefaultInstance()) return this;
            if (!other.getCountry().isEmpty()) {
                country_ = other.country_;
                onChanged();
            }
            if (!other.getRegion().isEmpty()) {
                region_ = other.region_;
                onChanged();
            }
            if (!other.getCity().isEmpty()) {
                city_ = other.city_;
                onChanged();
            }
            if (!other.getCityLatLong().isEmpty()) {
                cityLatLong_ = other.cityLatLong_;
                onChanged();
            }
            onChanged();
            return this;
        }

        public final boolean isInitialized() {
            return true;
        }

        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            org.datahem.protobuf.measurementprotocol.v2.Geo parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (org.datahem.protobuf.measurementprotocol.v2.Geo) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private java.lang.Object country_ = "";

        /**
         * <pre>
         * X-AppEngine-Country. The country from which sessions originated, based on IP address.
         * </pre>
         *
         * <code>optional string country = 1;</code>
         */
        public java.lang.String getCountry() {
            java.lang.Object ref = country_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                country_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-Country. The country from which sessions originated, based on IP address.
         * </pre>
         *
         * <code>optional string country = 1;</code>
         */
        public com.google.protobuf.ByteString
        getCountryBytes() {
            java.lang.Object ref = country_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                country_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-Country. The country from which sessions originated, based on IP address.
         * </pre>
         *
         * <code>optional string country = 1;</code>
         */
        public Builder setCountry(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            country_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-Country. The country from which sessions originated, based on IP address.
         * </pre>
         *
         * <code>optional string country = 1;</code>
         */
        public Builder clearCountry() {

            country_ = getDefaultInstance().getCountry();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-Country. The country from which sessions originated, based on IP address.
         * </pre>
         *
         * <code>optional string country = 1;</code>
         */
        public Builder setCountryBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            country_ = value;
            onChanged();
            return this;
        }

        private java.lang.Object region_ = "";

        /**
         * <pre>
         * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
         * </pre>
         *
         * <code>optional string region = 2;</code>
         */
        public java.lang.String getRegion() {
            java.lang.Object ref = region_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                region_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
         * </pre>
         *
         * <code>optional string region = 2;</code>
         */
        public com.google.protobuf.ByteString
        getRegionBytes() {
            java.lang.Object ref = region_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                region_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
         * </pre>
         *
         * <code>optional string region = 2;</code>
         */
        public Builder setRegion(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            region_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
         * </pre>
         *
         * <code>optional string region = 2;</code>
         */
        public Builder clearRegion() {

            region_ = getDefaultInstance().getRegion();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-Region. The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York.
         * </pre>
         *
         * <code>optional string region = 2;</code>
         */
        public Builder setRegionBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            region_ = value;
            onChanged();
            return this;
        }

        private java.lang.Object city_ = "";

        /**
         * <pre>
         * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
         * </pre>
         *
         * <code>optional string city = 3;</code>
         */
        public java.lang.String getCity() {
            java.lang.Object ref = city_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                city_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
         * </pre>
         *
         * <code>optional string city = 3;</code>
         */
        public com.google.protobuf.ByteString
        getCityBytes() {
            java.lang.Object ref = city_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                city_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
         * </pre>
         *
         * <code>optional string city = 3;</code>
         */
        public Builder setCity(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            city_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
         * </pre>
         *
         * <code>optional string city = 3;</code>
         */
        public Builder clearCity() {

            city_ = getDefaultInstance().getCity();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-City. Users' city, derived from their IP addresses or Geographical IDs.
         * </pre>
         *
         * <code>optional string city = 3;</code>
         */
        public Builder setCityBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            city_ = value;
            onChanged();
            return this;
        }

        private java.lang.Object cityLatLong_ = "";

        /**
         * <pre>
         * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
         * </pre>
         *
         * <code>optional string cityLatLong = 4;</code>
         */
        public java.lang.String getCityLatLong() {
            java.lang.Object ref = cityLatLong_;
            if (!(ref instanceof java.lang.String)) {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                cityLatLong_ = s;
                return s;
            } else {
                return (java.lang.String) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
         * </pre>
         *
         * <code>optional string cityLatLong = 4;</code>
         */
        public com.google.protobuf.ByteString
        getCityLatLongBytes() {
            java.lang.Object ref = cityLatLong_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                cityLatLong_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        /**
         * <pre>
         * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
         * </pre>
         *
         * <code>optional string cityLatLong = 4;</code>
         */
        public Builder setCityLatLong(
                java.lang.String value) {
            if (value == null) {
                throw new NullPointerException();
            }

            cityLatLong_ = value;
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
         * </pre>
         *
         * <code>optional string cityLatLong = 4;</code>
         */
        public Builder clearCityLatLong() {

            cityLatLong_ = getDefaultInstance().getCityLatLong();
            onChanged();
            return this;
        }

        /**
         * <pre>
         * X-AppEngine-CityLatLong. The approximate latitude and longitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes.
         * </pre>
         *
         * <code>optional string cityLatLong = 4;</code>
         */
        public Builder setCityLatLongBytes(
                com.google.protobuf.ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);

            cityLatLong_ = value;
            onChanged();
            return this;
        }

        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }

        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return this;
        }


        // @@protoc_insertion_point(builder_scope:datahem.protobuf.measurementprotocol.v2.Geo)
    }

    // @@protoc_insertion_point(class_scope:datahem.protobuf.measurementprotocol.v2.Geo)
    private static final org.datahem.protobuf.measurementprotocol.v2.Geo DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new org.datahem.protobuf.measurementprotocol.v2.Geo();
    }

    public static org.datahem.protobuf.measurementprotocol.v2.Geo getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Geo>
            PARSER = new com.google.protobuf.AbstractParser<Geo>() {
        public Geo parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new Geo(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<Geo> parser() {
        return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Geo> getParserForType() {
        return PARSER;
    }

    public org.datahem.protobuf.measurementprotocol.v2.Geo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

